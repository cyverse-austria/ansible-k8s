#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3
    tune.ssl.default-dh-param 2048

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          60m
    timeout server          60m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  localhost
    mode http
    bind *:443 ssl crt {{ tls_pem_path }}

    # redirect all HTTP traffic to HTTPS
    acl is_https ssl_fc
    http-request redirect scheme https unless is_https

    # keycloak
    acl keycloak hdr(host) -i {{ keycloak }}

    http-request add-header X-Forwarded-Proto https

    # userportal backend
    acl userportal hdr(host) -i {{ userportal }}


    #redirect to HTTPS if ssl_fc is false / off.
    redirect scheme https code 301 if !{ ssl_fc }
    #redirect scheme https code 301
    #http-request redirect scheme https if http

    use_backend userportal if userportal
    default_backend keycloak


#---------------------------------------------------------------------
# round robin balancing between the Keycloak backends
#---------------------------------------------------------------------
backend keycloak
    balance roundrobin
    option  log-health-checks
    option  forwardfor
{% for host in groups['k8s-workers'] %}
    server   s{{ loop.index }} {{ hostvars[host].ansible_fqdn }}:31360 check
{% endfor %}

#---------------------------------------------------------------------
# round robin balancing between the userportal backends
#---------------------------------------------------------------------
backend userportal
    #redirect scheme https if !{ ssl_fc }
    balance roundrobin
    option  log-health-checks
    option  forwardfor
{% for host in groups['k8s-workers'] %}
    server   s{{ loop.index }} {{ hostvars[host].ansible_fqdn }}:30392 check
{% endfor %}
